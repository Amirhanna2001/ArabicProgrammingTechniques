using System;

namespace MergeSortAlgo
{
    public class Program
    {
        
        // 3 5 7 8 9 32 5 
        static void Main(string[] args)
        {
            int[] arr = new int[] { 77, 33, 11, 55, 77, 99, 23 };
            PrintElemets(arr);
            Merge_Sort(arr, 0, arr.Length-1);
            PrintElemets(arr);

        }
        public static void PrintElemets(int[] arr)
        {
            for (int i = 0; i < arr.Length; ++i)
                Console.Write(arr[i] + " ");

            Console.WriteLine();
        }
        // 3 5 7 8 9 32 5 
        public static void Merge_Sort(int[] arr, int p, int r)
        {
            if (p < r)
            {
                int q = p + (r - p) / 2;
                Merge_Sort(arr, p, q);
                Merge_Sort(arr, q + 1, r);

                Merge(arr, p, q, r);
            }
        }
        // 1 2 4 45 6 67 
        public static void Merge(int[] arr, int p, int q, int r)
        {
            int n1 = q - p + 1;
            int n2 = r - q;

            int[] L = new int[n1];
            int[] R = new int[n2];

            int i, j;
            for (i = 0; i < n1; ++i)
                L[i] = arr[p + i];

            for (j = 0; j < n2; ++j)
                R[j] = arr[q + 1 + j];

            j = 0; i = 0;
            int k = p;

            while (i < n1 && j < n2)
            {
                if (L[i] <= R[j])
                {
                    arr[k] = L[i];
                    ++i;
                }
                else
                {
                    arr[k] = R[j];
                    ++j;
                }
                ++k;
            }
            while (i < n1)
            {
                arr[k] = L[i];
                ++k;
                ++i;
            }
            while (j < n2)
            {
                arr[k] = R[j];
                ++k;
                ++j;
            }

        }
    }
}
